Less Volume, More Creativity with dplyr
=================================================
author: R Pruim
date: 2014 CVC Workshop

---
title: "Less Volume, More Creativity with dplyr"
author: "R Pruim"
date: "May 29, 2014"
output: ioslides_presentation
---

Less Volume, More Creativity with dplyr
=======================================

```{r include=FALSE}
require(dplyr)
require(mosaic)
require(lubridate)
require(knitr)
opts_chunk$set(
  size="small",
  tidy=FALSE,
  fig.width=7,
  fig.height=3
  )
```


## 5 commands
```{r eval=FALSE}
 mutate()     # add columns to data
 summarise()  # 1-row summary
 select()     # subset of columns
 filter()     # subset of rows
 arrange()    # put rows in desired order
```

## Plus 1
```{r eval=FALSE}
  group_by()  # split/apply/combine
```

mutate()
==================
```{r}
require(mosaic); require(lubridate)
Births2 <- mutate(Births78, ldate=mdy(date))
head(Births2, 2)
```

```{r, tidy=FALSE}
Births2 <- mutate(Births2, 
  ldate = mdy(date) - years(100),
  wday = wday(ldate, label = TRUE, abbr = TRUE))
head(Births2, 2)
```

mutate()
==================

```{r fig.width=8, fig.height=3, out.height=400, fig.align="center", tidy=FALSE}
xyplot( births ~ ldate, data = Births2,  
  groups = wday, type = 'l',
  auto.key = list(
    columns = 4, lines = TRUE, points = FALSE),
  par.settings = list(superpose.line=list(lty=1)))
```

summarise()
===========
`summarise()` creates a 1-row summary of the data
```{r}
summarise(Births2, 
  total = sum(births), 
  mean = mean(births), 
  sd = sd(births)
)
```
select()
========
We can use `select()` to reduce to desired columns:
```{r, eval=FALSE}
Births2 <- select(Births2, 
                  ldate, births, wday)
head(Births2, 2)
```

Or we can think about what gets dropped:
```{r}
Births2 <- select(Births2,  
                  -date, -dayofyear)
head(Births2, 2)
```

filter()
========
`filter()` selects a subset of rows:
```{r}
Sunday <- filter(Births2, wday == "Sun")
summarise(Sunday, 
          mean = mean(births), n = n(), 
          total = sum(births))
```

arrange()
=========
`arrange()` arranges the rows in a desired order:

```{r}
head( arrange(Births2, births) )   # fewest births
```

arrange()
=========
```{r}
tail( arrange(Births2, births) )   # most births
```

But wait, there's more: group_by()
==========
```{r}
summarise( 
  group_by(Births2, wday),  
    mean = mean(births), 
    min = min(births), 
    max = max(births),
    total = sum(births))
```  

group_by() -- chaining syntax
==========
```{r}
Births2 %>%
  group_by(wday) %>%
  summarise(mean = mean(births), 
    min=min(births), max = max(births)) %>%
  mutate(range = max - min) %>%
  arrange(mean)
```  

Working with bigger data
=====================
`dplyr` is designed to work with data of different formats and sizes.
 * separates syntax from storage 
   * modular design will allow for additional back ends over time
   * already supports `MySQL`, `SQLite`, `PostgreSQL`
 * provides cleverer data-frame-like objects for local (`tbl_`)
 * designed for speed
 
*Skills learned on small data immediately transfer to large data settings*
 * Another example of less volume, more creativity

Data from UCSC Genome Bioinformatics
======================================

The example below queries a UCSC Genome Bionformatics to find information
about genes.

* [main web site](https://genome.ucsc.edu/)
    * [table browser](https://genome.ucsc.edu/cgi-bin/hgTables?org=human)
    * [UCSC SQL info](https://genome.ucsc.edu/goldenPath/help/mysql.html)

* `RMySQL` package  -- allows access to data in `MySQL` databases
* `dplyr` package -- process SQL just like data frame

Connecting to the database
=================
```{r}
# connect to a UCSC database
UCSCdata <- src_mysql(
  host="genome-mysql.cse.ucsc.edu",
  user="genome",
  dbname="mm9")
# grab one of the many tables in the database
KnownGene <- tbl(UCSCdata, "knownGene")
```

Grabbing Chromosome 1 data
===========================
```{r}
# Get the gene name, chromosome, start and end sites for genes on Chromosome 1
Chrom1 <-
  KnownGene %>% 
  select( name, chrom, txStart, txEnd ) %>%
  filter( chrom == "chr1" )
```

```{r}
Chrom1 %>% mutate(length=(txEnd - txStart)/1000) -> Chrom1l
Chrom1l
```

Caution: Chrom1 is not a data frame
=========
```{r}
class(Chrom1)
```
* For efficiency, the full data are not pulled from the database until needed 

* the `mutate()` command can only use a limited set of operations
(those available in SQL) -- can't do `log()` inside `mutate()`, for example

Collecting the data
===================
* We can `collect()` the data into data frame.  

* Necessary for plotting

```{r}
Chrom1df <- collect(Chrom1l)       # collect into a data frame
histogram( ~length, data=Chrom1df, xlab="gene length (kb)" )
```


Baby Names
===========

```{r}
# fetch these from http://www.calvin.edu/~rpruim/data/BabyNames.rda
load("../../Data/BabyNames.rda")  # your path will be different
str(BabyNames, 2)  # ack! those years are character data
BabyNames <- mutate(BabyNames, year = as.numeric(year))
str(BabyNames, 2)  # that's better
```

Adding in the ranks
===================
Let's add the rank of each name (within sex) for each year.

Give it a try.

Adding in the ranks
===================

```{r}
BabyNamesWithRank <- 
  BabyNames %>%
    group_by(year, sex) %>%
    mutate(rank = rank(-count))
head(BabyNamesWithRank)
```

Explore Your Name
=================

How has the rank of your name changed over time?  Create a plot.

Explore Your Name
=================

```{r}
BabyNamesWithRank %>% 
  filter( name=="Randy" & sex=="M" ) -> Randy
xyplot( count ~ year, data = Randy, type="l")
```

Explore Your Name
=================
```{r}
xyplot( rank ~ year, data = Randy,
        type="l", ylim=c(7000,0))
```