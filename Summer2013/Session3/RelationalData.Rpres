<style type="text/css">
span.boxed {
  border:5px solid gray;
  border-radius:10px;
  padding: 5px;
}
span.invboxed {
  border:5px solid gray;
  padding: 5px;
  border-radius:10px;
  color: white;
}
table, td, th
{
border:0px;
}
</style>

Relational Data and Operations
========================================================
author: Daniel Kaplan
date: June 13, 2013
autosize: true

```{r include=FALSE}
require(DCF)
require(mosaic)
```

Data Tables
=============================

The tabular format for data
* **Columns**, which we will call "Variables"
* **Rows**, which we will call "Cases"
* A **Cell** is the intersection of a Row and a Column

A single value is stored in each cell.  For us ...
* Quantitative (a number)
* Categorical (typically short text, describing categories)

Auxiliary information stored in a **Codebook**
* units and definitions of quantitative variables
* levels for categorical variables
* meta-data such as the sampling frame, date, ...

Know Your Tables!
============================

* What constitutes a Case?
    * `OrdwayBirdsOrig`
    * `nhanes`
    * `WakeVotersSmall`

* What is each Variable?
    * Categorical
    * Quantitative
    
Quick Look at a Table
==========================
```{r eval=FALSE}
data(OrdwayBirdsOrig)
names(OrdwayBirdsOrig)
nrow(OrdwayBirdsOrig)
```

Quick Look at a Variable
==========================
```{r eval=FALSE}
summary(OrdwayBirdsOrig$Month)
class(OrdwayBirdsOrig$Month)
```
Important classes:
* `data.frame`: a collection of cases
* `numeric`, `integer`: quantitative
* `factor`, `character`: categorical

We're expecting `Month` to be quantitative, but it isn't.

Room for Improvement
==========================
* UTILITY FUNCTION: `as.quantitative()` might do sensible things to convert a factor to a quantitative variable.
* a levels method for type character, a levels method for quantitative
* an `allowed` method for quantitative and categorical


Categorical Variables
==========================
```{r eval=FALSE}
summary(OrdwayBirdsOrig$SpeciesName)
```

```{r eval=FALSE}
levels(OrdwayBirdsOrig$SpeciesName)
tally(~SpeciesName, data=OrdwayBirds)
```

Grab a subset of variables
==========================
```{r tidy=FALSE,eval=FALSE}
data(OrdwayBirdsOrig)
birds <- subset(OrdwayBirdsOrig, 
              select=c("Day","Month","SpeciesName"))
```
```{r}
names(birds)
```

Grab a subset of cases
==========================

### 1. According to a criterion
```{r}
Oct <- data(birds, Month=="10")
Fall <- data(birds, Month %in% c("10","11"))
```

### 2. Just a few
```{r}
head(birds,3)
```

===========================
title: none

### 3. Random sample
```{r}
sample(birds,3)
```



Relational Databases
============================

A relational database is an important form of organization of data.  

*Relations* are more or less the same as tables.

*Relational databases* are more or less the same as collections of tables.
* Additional structures to increase efficiency and reliability

*SQL* (Structured Query Language) is a widely used tool for constructing, operating, and interacting with relational databases.

DCF Goals for Relational Databases
=============================

* Understand why splitting data up among tables is helpful.
* Be able to perform basic manipulations of tables in order to produce a result table with the data in a useful form.

NOT
* SQL
* Detailed design of databases

Basic Relational Operations 
=============================
* Create a new variable from existing variables
* Extract a subset of cases based on a criterion defined in terms of variables
* Divide cases into groups and perform a calculation on each group
* Combine two (or more tables)

In SQL terminology:

    PROJECT, SELECT, GROUP, JOIN

Spreadsheets and Tables
====================================
Spreadsheet software (e.g. Excel, Google Docs/Forms) is sometimes a good choice for entering data.

However, spreadsheets do not enforce the basic constraints of a data table:
* Rectangular shape
* Types of values
* Permanence/Unmutability
* Separation of analysis from data storage.

Spreadsheets support a casual and undisciplined approach to organization that can make it hard to carry out analyses.

Don't use a spreadsheet like a tablecloth!

R Functions and Tables
=====================================
The standard R representation of a table is a **data frame**.

The R functions highlighted in DCF have a typical form:
<pre>
value <- operation( [what to do], data=[name of data frame], [additional info])
</pre>

You can refer to variables by their name
* Capitalization and spelling is important
* CAREFUL: Pay attention to quotes and the use of ~ (tilde).

Reading in Data
=====================================
Tables are typically stored in **files** and read in to an R session as a data frame.

Examples in DCF:
* Data in a package: `data(WakeVotersSmall)`
* Data in a repository, e.g. `g <- fetchData("grades.csv")`

Other possibilities:
* Data from other software packages
* Data from databases

Changing the data in the R session does **not** change the original store.




Creating a New Variable from Existing Variables
=====================================

* Refer to existing variables by name
* Use arithmetic and other operations
* Assign the result, typically overwriting.

Example: `nhanes` body measurement data.  Creating a new "surface area" measure on a cylindrical model, waist circumference $\times$ height
```{r}
data(nhanes) # read the data
nhanes <- transform(nhanes, area=wst*hgt)
```

Some Common Transformations
=====================================

* Arithmetic, e.g. ratios
* Scale, e.g. logarithms [XKCD cartoon](http://xkcd.com/1162/)
* Division into groups, e.g.
   * child, teen, adult
   * ntiles
* Contains a pattern, e.g. "swallow", "hawk"

Selecting a Subset
=====================================
Required inputs:
* The condition that identifies the subset

Grouping
=====================================
Required inputs:
* The variable(s) that define the groups
* The calculation to do on each group

Joining
=====================================
Combine information from two tables with (possibly) different cases.


Exercise: What Transformations?
=====================================

Ordway Bird data to this graphic:

Month  | Species Name
:------|:------------
3 | Tree Sparrow
10 | Fox Sparrow
10 | American Goldfinch
3  | Tree Sparrow
1 | Black-capped Chickadee
12 | Black-capped Chickadee

***********

![bird by season](birds-by-month.png)

Data Format for Graphic
=======================

Month  | Species Name | Count
:------|:-------------|:----
3 | Tree Sparrow | 7
10 | Fox Sparrow | 21
10 | American Goldfinch |9
1 | Black-capped Chickadee | 1
12 | Black-capped Chickadee | 3

***********

![bird by season](birds-by-month.png)

Steps
=======================

1. Count by species and month (easy!)
2. Count by species
3. Join (1) and (2)
4. Subset only the most common species

Task
=====================================
Make the bird graphic.

Hints:
* Aim for a `speciesCount` table in an appropriate form.
* Use `mBar(speciesCount)` to generate the graph
* Criterion: Only those species with more than, say, 50 records in the most populous month.

Join Example: Data Cleaning
=====================================
[Species in the Ordway Bird Data](../Worksheets/BirdCleaning.html)


MISC
====================================
Other syntax for mavens:

* Use the $ notation
* Brackets and indexing
